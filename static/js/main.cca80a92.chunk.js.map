{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","none","sortType","setSortType","isReversed","setIsReversed","visibleGoods","goods","result","sort","g1","g2","length","name","localeCompare","reverse","getPreparedGoods","conditionForReset","className","type","cn","onClick","current","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,YAAAA,E,iBAAAA,M,KAiBL,IAuBaE,EAAgB,WAC3B,MAAgCC,mBAAmBH,EAASI,MAA5D,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAoCH,oBAAkB,GAAtD,mBAAOI,EAAP,KAAmBC,EAAnB,KAEMC,EA3BiC,SAACC,EAAD,GAAsC,IAA5BL,EAA2B,EAA3BA,SAAUE,EAAiB,EAAjBA,WACrDI,EAAM,YAAOD,GAmBnB,OAjBAC,EAAOC,MAAK,SAACC,EAAIC,GACf,OAAQT,GACN,KAAKL,EAASe,OACZ,OAAOF,EAAGE,OAASD,EAAGC,OAExB,KAAKf,EAASgB,KACZ,OAAOH,EAAGI,cAAcH,GAE1B,QACE,OAAO,MAITP,GACFI,EAAOO,UAGFP,EAOcQ,CAAiBlB,EAAiB,CACrDI,WACAE,eAQIa,EAAoBf,IAAaL,EAASI,MAAQG,EAExD,OACE,sBAAKc,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLD,UAAWE,IAAG,iBAAkB,CAC9B,WAAYlB,IAAaL,EAASgB,OAEpCQ,QAAS,kBAAMlB,EAAYN,EAASgB,OALtC,iCAUA,wBACEM,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,WAAYlB,IAAaL,EAASe,SAEpCS,QAAS,kBAAMlB,EAAYN,EAASe,SALtC,4BAUA,wBACEO,KAAK,SACLD,UAAWE,IAAG,oBAAqB,CACjC,YAAahB,IAEfiB,QAAS,kBAAMhB,GAAc,SAAAiB,GAAO,OAAKA,MAL3C,qBAWEL,GACE,wBACEE,KAAK,SACLD,UAAU,4BACVG,QA7CE,WACZlB,EAAYN,EAASI,MACrBI,GAAc,IAwCN,sBAWN,6BACE,6BAEIC,EAAaiB,KAAI,SAACC,GAAD,OACf,oBACE,UAAQ,OADV,SAIGA,GAFIA,cC3HrBC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.cca80a92.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport cn from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  none = 'none',\n  name = 'name',\n  length = 'length',\n}\ninterface Options {\n  sortType:SortType,\n  isReversed:boolean\n}\n\ntype GetPrepareGoods = (\n  goods:string[],\n  {\n    sortType,\n    isReversed,\n  }:Options) => string[];\n\nconst getPreparedGoods:GetPrepareGoods = (goods, { sortType, isReversed }) => {\n  const result = [...goods];\n\n  result.sort((g1, g2) => {\n    switch (sortType) {\n      case SortType.length:\n        return g1.length - g2.length;\n\n      case SortType.name:\n        return g1.localeCompare(g2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReversed) {\n    result.reverse();\n  }\n\n  return result;\n};\n\nexport const App: React.FC = () => {\n  const [sortType, setSortType] = useState<SortType>(SortType.none);\n  const [isReversed, setIsReversed] = useState<boolean>(false);\n\n  const visibleGoods = getPreparedGoods(goodsFromServer, {\n    sortType,\n    isReversed,\n  });\n\n  const reset = () => {\n    setSortType(SortType.none);\n    setIsReversed(false);\n  };\n\n  const conditionForReset = sortType !== SortType.none || isReversed;\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          className={cn('button is-info', {\n            'is-light': sortType !== SortType.name,\n          })}\n          onClick={() => setSortType(SortType.name)}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-success', {\n            'is-light': sortType !== SortType.length,\n          })}\n          onClick={() => setSortType(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', {\n            'is-light': !isReversed,\n          })}\n          onClick={() => setIsReversed(current => !current)}\n        >\n          Reverse\n        </button>\n\n        {\n          conditionForReset && (\n            <button\n              type=\"button\"\n              className=\"button is-danger is-light\"\n              onClick={reset}\n            >\n              Reset\n            </button>\n          )\n        }\n      </div>\n\n      <ul>\n        <ul>\n          {\n            visibleGoods.map((good) => (\n              <li\n                data-cy=\"Good\"\n                key={good}\n              >\n                {good}\n              </li>\n            ))\n          }\n        </ul>\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}